// Luke Ludlow
// CS 3500
// 2019 October

using SpreadsheetUtilities;
using SS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SpreadsheetGUI
{
    /// <summary>
    /// this is the Form class generated by the windows form creator.
    /// i renamed it to SpreadsheetGUIView to clarify that this component is the View in my
    /// model view controller architecture.
    /// 
    /// please see the readme in PS6/Resources/README.md for a detailed explanation of 
    /// this component's design and responsibility.
    /// </summary>
    public partial class SpreadsheetGUIView : Form
    {

        private Controller controller;

        public SpreadsheetGUIView()
        {
            InitializeComponent();

            // subscribe to the spreadsheet panel's important event
            spreadsheetPanel.SelectionChanged += OnSelectionChanged;
            // set the AcceptButton so that you can press the enter key to set the cell contents
            AcceptButton = setContentsButton;

            controller = new Controller();
            // subscribe to the controller's events that update the view
            controller.ShowCellNameEvent += ShowCellName;
            controller.ShowCellContentsEvent += ShowCellContents;
            controller.ShowCellValueEvent += ShowCellValue;
            controller.SelectDefaultStartCellEvent += SelectDefaultStartCell;
            controller.ShowErrorMessageEvent += ShowErrorMessage;
            controller.ShowWarningMessageWithYesNoEvent += ShowWarningMessageWithYesNo;
            controller.ShowSaveFileDialogEvent += ShowSaveFileDialog;
            controller.ShowOpenFileDialogEvent += ShowOpenFileDialog;
            controller.ActivateLightModeEvent += ActivateLightMode;
            controller.ActivateDarkModeEvent += ActivateDarkMode;
            controller.InitializeController();
        }

        /// <summary>
        /// for the additional creative feature, my spreadsheet gui has a dark mode! 
        /// click the sun/moon button on the top right to toggle dark mode.
        /// 
        /// please see the readme in PS6/Resources/README.md for a detailed explanation of how 
        /// i implemented my dark mode switch.
        /// </summary>
        private void ActivateDarkMode()
        {
            BackColor = Color.Black;
            ForeColor = Color.White;
            cellNameTextBox.BackColor = Color.Black;
            cellNameTextBox.ForeColor = Color.White;
            cellValueTextBox.BackColor = Color.Black;
            cellValueTextBox.ForeColor = Color.White;
            cellContentsTextBox.BackColor = Color.Black;
            cellContentsTextBox.ForeColor = Color.White;
            setContentsButton.BackColor = Color.Black;
            setContentsButton.ForeColor = Color.White;
            darkModeButton.BackColor = Color.Black;
            darkModeButton.BackgroundImage = Properties.Resources.light_sun_icon;
            spreadsheetPanel.ActivateDarkMode();
        }

        /// <summary>
        /// for the additional creative feature, my spreadsheet gui has a dark mode! 
        /// click the sun/moon button on the top right to toggle dark mode.
        /// 
        /// please see the readme in PS6/Resources/README.md for a detailed explanation of how 
        /// i implemented my dark mode switch.
        /// </summary>
        private void ActivateLightMode()
        {
            BackColor = Color.White;
            ForeColor = Color.Black;
            cellNameTextBox.BackColor = Color.White;
            cellNameTextBox.ForeColor = Color.Black;
            cellValueTextBox.BackColor = Color.White;
            cellValueTextBox.ForeColor = Color.Black;
            cellContentsTextBox.BackColor = Color.White;
            cellContentsTextBox.ForeColor = Color.Black;
            setContentsButton.BackColor = Color.White;
            setContentsButton.ForeColor = Color.Black;
            darkModeButton.BackColor = Color.White;
            darkModeButton.BackgroundImage = Properties.Resources.dark_moon_icon;
            spreadsheetPanel.ActivateLightMode();
        }



        private void ShowWarningMessageWithYesNo(string warningMessage, string title, out bool userChoseToContinue)
        {
            DialogResult result = MessageBox.Show(warningMessage, title, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes) {
                userChoseToContinue = true;
            } else {
                userChoseToContinue = false;
            }
        }

        private void ShowErrorMessage(string message, string title)
        {
            MessageBox.Show(message, title, MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void ShowOpenFileDialog()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "spreadsheet file (*.sprd)|*.sprd|all files (*.*)|*.*";
            openFileDialog.Title = "read an existing spreadsheet file";
            openFileDialog.ShowDialog();
            controller.OpenFile(openFileDialog.FileName);
        }


        private void ShowSaveFileDialog()
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "spreadsheet file (*.sprd)|*.sprd|all files (*.*)|*.*";
            saveFileDialog.Title = "save current spreadsheet to a file";
            saveFileDialog.ShowDialog();
            controller.SaveFileAs(saveFileDialog.FileName, saveFileDialog.FilterIndex);
        }

        private void SelectDefaultStartCell()
        {
            spreadsheetPanel.SetSelection(0, 0);
            OnSelectionChanged(spreadsheetPanel);
        }


        private void ShowCellName(string name)
        {
            cellNameTextBox.Text = name;
        }

        private void ShowCellContents(string contents)
        {
            cellContentsTextBox.Text = contents;
        }

        private void ShowCellValue(int col, int row, string value)
        {
            spreadsheetPanel.SetValue(col, row, value);
            if (IsCurrentlySelectedCell(col, row)) {
                cellValueTextBox.Text = value;
            }
        }

        private bool IsCurrentlySelectedCell(int col, int row)
        {
            spreadsheetPanel.GetSelection(out int currentCol, out int currentRow);
            return col == currentCol && row == currentRow;
        }

        /// <summary>
        /// notify the controller that a cell's contents have been changed
        /// </summary>
        private void NotifyCellContentsChanged()
        {
            string contents = cellContentsTextBox.Text;
            spreadsheetPanel.GetSelection(out int col, out int row);
            controller.HandleCellContentsChanged(col, row, contents);
        }

        /// <summary>
        /// notify the controller that the selection has been changed 
        /// </summary>
        private void NotifySelectionChanged()
        {
            spreadsheetPanel.GetSelection(out int col, out int row);
            controller.HandleSelectionChanged(col, row);
        }

        /// <summary>
        /// the windows forms generated handler for when spreadsheet panel selection changes.
        /// </summary>
        private void OnSelectionChanged(SpreadsheetPanel panel)
        {
            cellContentsTextBox.Select();
            NotifySelectionChanged();
        }


        /// <summary>
        /// windows forms generated event handler
        /// </summary>
        private void SetContentsButton_Click(object sender, EventArgs e)
        {
            NotifyCellContentsChanged();
        }

        /// <summary>
        /// override to process key input. used for arrowkey navigation.
        /// </summary>
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            spreadsheetPanel.GetSelection(out int col, out int row);
            if (controller.ProcessArrowKey(keyData.ToString(), ref col, ref row)) {
                spreadsheetPanel.SetSelection(col, row);
                OnSelectionChanged(spreadsheetPanel);
                return true;
            } else {
                return base.ProcessCmdKey(ref msg, keyData);
            }
        }

        /// <summary>
        /// windows forms generated event handler
        /// </summary>
        private void SpreadsheetGUIView_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (controller.SpreadsheetHasBeenModifiedSinceLastSave()) {
                bool userChoseToClose = controller.WarnUserAndAskToContinue();
                if (!userChoseToClose) {
                    e.Cancel = true;
                }
            }
        }

        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void darkModeButton_Click(object sender, EventArgs e)
        {
            controller.ToggleDarkMode();
        }


        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void newMenuItem_Click(object sender, EventArgs e)
        {
            SpreadsheetGUIApplicationContext.GetAppContext().RunForm(new SpreadsheetGUIView());
        }

        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void openMenuItem_Click(object sender, EventArgs e)
        {
            controller.HandleOpenFile();
        }


        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void saveMenuItem_Click(object sender, EventArgs e)
        {
            controller.SaveFile();
        }

        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void saveAsMenuItem_Click(object sender, EventArgs e)
        {
            ShowSaveFileDialog();
        }

        /// <summary>
        /// windows forms generated click event handler
        /// </summary>
        private void closeMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

    }
}
